/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.caraguataappz.mcm.view;

import br.com.caraguataappz.mcm.dao.DAOManager;
import br.com.caraguataappz.mcm.model.Consulta;
import br.com.caraguataappz.mcm.model.Paciente;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gilca
 */
public class JDAgendarConsulta extends javax.swing.JDialog {

    private Consulta consulta;

    /**
     * Creates new form JDAgendarConsulta
     *
     * @param parent
     * @param modal
     */
    public JDAgendarConsulta(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * Creates new form JDAgendarConsulta
     *
     * @param parent
     * @param modal
     * @param consulta
     */
    public JDAgendarConsulta(java.awt.Frame parent, boolean modal, Consulta consulta) {
        super(parent, modal);

        this.consulta = consulta;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jrbIsRetorno = new javax.swing.JRadioButton();
        jcbStatusConsulta = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jtfNomeMedico = new javax.swing.JTextField();
        jtfDataConsulta = new javax.swing.JTextField();
        jtfHorarioConsulta = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jtfPesquisaPaciente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePaciente = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("MÉDICO:");

        jLabel6.setText("DATA:");

        jLabel8.setText("HORÁRIO:");

        jrbIsRetorno.setBackground(new java.awt.Color(255, 255, 255));
        jrbIsRetorno.setText("Retorno");
        jrbIsRetorno.setToolTipText("Selecione se a consulta é um retorno.");

        jcbStatusConsulta.setBackground(new java.awt.Color(51, 153, 255));
        jcbStatusConsulta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "agendada", "faltou", "desmarcada", "finalizada" }));
        jcbStatusConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbStatusConsultaActionPerformed(evt);
            }
        });

        jLabel4.setText("Situação:");

        jtfNomeMedico.setEditable(false);

        jtfDataConsulta.setEditable(false);

        jtfHorarioConsulta.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfNomeMedico)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfDataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfHorarioConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jrbIsRetorno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbStatusConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfNomeMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfHorarioConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbIsRetorno)
                    .addComponent(jcbStatusConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jButtonSalvar.setBackground(new java.awt.Color(51, 153, 255));
        jButtonSalvar.setForeground(new java.awt.Color(51, 153, 255));
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCancelar.setBackground(new java.awt.Color(51, 153, 255));
        jButtonCancelar.setForeground(new java.awt.Color(51, 153, 255));
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonCancelar))
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jtfPesquisaPaciente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPesquisaPaciente.setToolTipText("Busque aqui pelo paciente (nome ou prontuário).");
        jtfPesquisaPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisaPacientejtfPesquisaPacienteKeyReleased(evt);
            }
        });

        jTablePaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Prontuário:", "Nome:", "CPF:", "Residencial:", "Celular:", "paciente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePaciente.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTablePaciente);
        if (jTablePaciente.getColumnModel().getColumnCount() > 0) {
            jTablePaciente.getColumnModel().getColumn(0).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTablePaciente.getColumnModel().getColumn(1).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(2).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTablePaciente.getColumnModel().getColumn(3).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTablePaciente.getColumnModel().getColumn(4).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTablePaciente.getColumnModel().getColumn(5).setMinWidth(0);
            jTablePaciente.getColumnModel().getColumn(5).setPreferredWidth(0);
            jTablePaciente.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/go/mcm/img/search-7-16.png"))); // NOI18N

        jLabel10.setText("Paciente:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel7))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPesquisaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel9))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfPesquisaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //título da janela
        this.setTitle("Agendar Consulta");
        //localização da janela (centro do monitor)
        this.setLocationRelativeTo(null);
        //ícone da janela
        URL url = this.getClass().getResource("nurse-16.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(iconeTitulo);

        if (this.consulta != null) {
            //NOME DO MEDICO
            this.jtfNomeMedico.setText(this.consulta.getMedico().getPessoa().getNomePessoa());
            //data da consulta
            this.jtfDataConsulta.setText(this.consulta.getDataConsulta().toString());
            //horario da consulta
            this.jtfHorarioConsulta.setText(this.consulta.getHorarioConsulta().toString());

            if (consulta.getIsRetorno() == 'S') {

                this.jrbIsRetorno.setSelected(true);

            }

            this.jcbStatusConsulta.setSelectedItem(consulta.getStatusConsulta());

            if (this.consulta.getPaciente() != null) {

                DefaultTableModel tabelaPaciente = (DefaultTableModel) this.jTablePaciente.getModel();

                tabelaPaciente.setNumRows(0);

                tabelaPaciente.addRow(new Object[]{
                    consulta.getPaciente().getProntuarioPaciente(),
                    consulta.getPaciente().getPessoa().getNomePessoa(),
                    consulta.getPaciente().getPessoa().getCpfPessoa(),
                    consulta.getPaciente().getPessoa().getTelefonePessoa().getTelefoneResidencial(),
                    consulta.getPaciente().getPessoa().getTelefonePessoa().getTelefoneCelular(),
                    consulta.getPaciente()
                });

            } else {

                this.jcbStatusConsulta.setSelectedIndex(0);

                this.jcbStatusConsulta.setEnabled(false);

                this.preencherTabelaPaciente();

            }

        }


    }//GEN-LAST:event_formWindowOpened

    private void jtfPesquisaPacientejtfPesquisaPacienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaPacientejtfPesquisaPacienteKeyReleased
        //salvando em uma String o texto digitado no campo de pesquisa de paciente
        String campoPesquisa = this.jtfPesquisaPaciente.getText();

        //declarando uma lista de pacientes e passando o valor null;
        ArrayList<Paciente> listaPaciente = null;

        //buscando a lista de pacientes no banco
        try {
            //salvando o resultado da busca na lista de pacientes
            listaPaciente = DAOManager.pacienteDAO().listarPaciente();
        } catch (SQLException ex) {
            //exibindo uma mensagem caso seja disparada uma exceção
            JOptionPane.showMessageDialog(this, "Erro na leitura do banco de dados.\n"
                    + "Por favor, entre em contato com o suporte.\n"
                    + "Informações sobre o erro: " + ex.getMessage());
        }

        //verificando se a lista de paciente foi preenchida ou se continua vazia (null)
        if (listaPaciente != null) {
            //pegando o modelo da tabela paciente
            DefaultTableModel tabelaPaciente
                    = (DefaultTableModel) this.jTablePaciente.getModel();

            //setando o número de linhas da tabela para zero
            tabelaPaciente.setNumRows(0);

            //loop que varre a lista de pacientes e busca. em cada paciente da lista, pelo texto digitado no campo de pesquisa
            for (int i = 0; i < listaPaciente.size(); i++) {
                Paciente paciente = listaPaciente.get(i);

                String prontuarioPaciente = String.valueOf(paciente.getProntuarioPaciente());
                String nomePaciente = paciente.getPessoa().getNomePessoa().toLowerCase();

                //se o nome do paciente ou o prontuário do mesmo possuem parte ou todo do texto digitado, o paciente é inserido na tabela paciente
                if (nomePaciente.contains(campoPesquisa)
                        || prontuarioPaciente.contains(campoPesquisa)) {

                    tabelaPaciente.addRow(new Object[]{
                        listaPaciente.get(i).getProntuarioPaciente(),
                        listaPaciente.get(i).getPessoa().getNomePessoa(),
                        listaPaciente.get(i).getPessoa().getCpfPessoa(),
                        listaPaciente.get(i).getPessoa().getTelefonePessoa().getTelefoneResidencial(),
                        listaPaciente.get(i).getPessoa().getTelefonePessoa().getTelefoneCelular(),
                        listaPaciente.get(i)
                    });

                }

                //setando o novo modelo da tabela paciente
                this.jTablePaciente.setModel(tabelaPaciente);
                //indicando ser possivel selecionar uma linha da tabela
                this.jTablePaciente.setRowSelectionAllowed(true);
                //indicando NÃO ser possível a selecao de uma coluna da tabela
                this.jTablePaciente.setColumnSelectionAllowed(false);

            }
        }
    }//GEN-LAST:event_jtfPesquisaPacientejtfPesquisaPacienteKeyReleased

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jcbStatusConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbStatusConsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbStatusConsultaActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        if (this.jTablePaciente.getRowCount() > 1) {

            JOptionPane.showMessageDialog(this, "Favor escolher o paciente "
                    + "através do campo de pesquisa.");

        } else { //agendar a consulta - duh!

            Paciente paciente = (Paciente) this.jTablePaciente.getValueAt(0, 5);

            this.consulta.setStatusConsulta(this.jcbStatusConsulta.getSelectedItem().toString());

            this.consulta.setPaciente(paciente);

            if (this.jrbIsRetorno.isSelected()) {

                this.consulta.setIsRetorno('S');

            } else {

                this.consulta.setIsRetorno('N');
            }

            try {
                
                boolean salvarConsulta;

                if (!this.jcbStatusConsulta.isEnabled()) {
                    
                     //salvar a consulta no historico e apagar            

                } 
                
                boolean agendarConsulta  = DAOManager.consultaDAO().agendarConsulta(consulta);

                if (agendarConsulta) {

                    JOptionPane.showMessageDialog(this, "Consulta salva com sucesso!");

                    this.dispose();

                }

            } catch (SQLException ex) {

                JOptionPane.showMessageDialog(this, "Erro de gravação de dados."
                        + "\nFavor entrar em contato com o suporte"
                        + "\nInformações sobre o erro: " + ex.getMessage()
                );

            }

        }

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Winsows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDAgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDAgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDAgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDAgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            JDAgendarConsulta dialog = new JDAgendarConsulta(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePaciente;
    private javax.swing.JComboBox<String> jcbStatusConsulta;
    private javax.swing.JRadioButton jrbIsRetorno;
    private javax.swing.JTextField jtfDataConsulta;
    private javax.swing.JTextField jtfHorarioConsulta;
    private javax.swing.JTextField jtfNomeMedico;
    private javax.swing.JTextField jtfPesquisaPaciente;
    // End of variables declaration//GEN-END:variables

    /*
    *   Método que preenche a tabela paciente
     */
    private void preencherTabelaPaciente() {

        try {
            ArrayList<Paciente> listaPaciente = DAOManager.pacienteDAO().listarPaciente();

            DefaultTableModel tabelaPaciente = (DefaultTableModel) this.jTablePaciente.getModel();

            tabelaPaciente.setNumRows(0);

            String dataAux;

            for (int i = 0; i < listaPaciente.size(); i++) {

                tabelaPaciente.addRow(new Object[]{
                    listaPaciente.get(i).getProntuarioPaciente(),
                    listaPaciente.get(i).getPessoa().getNomePessoa(),
                    listaPaciente.get(i).getPessoa().getCpfPessoa(),
                    listaPaciente.get(i).getPessoa().getTelefonePessoa().getTelefoneResidencial(),
                    listaPaciente.get(i).getPessoa().getTelefonePessoa().getTelefoneCelular(),
                    listaPaciente.get(i)
                });

            }

            //setando o novo modelo da tabela
            this.jTablePaciente.setModel(tabelaPaciente);
            //indicando ser possivel selecionar uma linha da tabela
            this.jTablePaciente.setRowSelectionAllowed(true);
            //indicando NÃO ser possível a selecao de uma coluna da tabela
            this.jTablePaciente.setColumnSelectionAllowed(false);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro de leitura dos dados. Favor entrar em"
                    + "contato com o suporte.\nInformação sobre o erro:" + ex.getMessage());
        }
    }

}
